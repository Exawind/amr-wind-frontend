# Note to self: run on skybridge with
#  $ module load canopy/2.1.9
#  $ export PYTHONPATH=~/.local/lib/python2.7/site-packages/
#

import logging
import threading
import os, sys
import time
import matplotlib.pyplot    as plt

if sys.version_info[0] < 3:
    import Tkinter as Tk
else:
    import tkinter as Tk
import warnings
warnings.filterwarnings('ignore')

# Load the screenshot library
scriptpath='../../'
sys.path.insert(1, scriptpath)
import genscreenshot as screenshot
import nbformat as nbf

getsubstring          = lambda x, s1, s2: x.split(s1)[-1].split(s2)[0]

setAMRWindInputString = screenshot.setAMRWindInputString
NBADDMARKDOWN = lambda nb, x: nb['cells'].append(nbf.v4.new_markdown_cell(x))
NBADDCELL     = lambda nb, x: nb['cells'].append(nbf.v4.new_code_cell(x.strip()))


# Get the yaml help file
farmyaml = os.path.join(scriptpath, 'farm.yaml')

# ========================================
# Set the tutorial properties
scrwidth  = 1280
scrheight = 800
imagedir  = 'images'
mdtemplate= 'tutorial3gui_template.md'
mdfile    = 'tutorial3gui.md'
nbfile    = 'tutorial3python.ipynb'
gennbfile = True
runjupyter= True
savefigs  = True
# ========================================

farmtab    = 8
turbinetab = 4
abltab     = 2
domaintab  = 1
simtab     = 0

mdstr = ""
mdvar = {}
mdvar['makescript'] = __file__

# Load the markdown template
with open (mdtemplate, "r") as myfile:
    mdstr=myfile.read()

# Create the directory
if not os.path.exists(imagedir): os.makedirs(imagedir)

# create a virtual display
vdisplay = screenshot.start_Xvfb(width=scrwidth, height=scrheight)

# Set the logging functions
format = "%(asctime)s: %(message)s"
logging.basicConfig(format=format, 
                    level=logging.INFO,
                    datefmt="%H:%M:%S")

# Start the app
logging.info("Main    : Starting script")
casedict={}
lock= threading.Lock()
t1 = threading.Thread(target=screenshot.start_instance, 
                     args=(1,casedict, lock))
t1.start()
logging.info("Main    : started case thread")
time.sleep(5)

case=casedict[1]
case.launchpopupwin('plotdomain', savebutton=False).okclose()

if gennbfile:
    nb = nbf.v4.new_notebook()
    nb['cells'] = []

###########################
if gennbfile:
    # Get the header
    txt = "# Tutorial 3: Setting up a farm calculation"
    NBADDMARKDOWN(nb, txt)

    # Load the modules
    txt = """\
# Note: this python notebook was automatically generated by {makescript}

# Load the amrwind-frontend module
amrwindfedir = '../../'  # Location of amrwind-frontend directory
import sys, os
sys.path.insert(1, amrwindfedir)

# Load the libraries
import amrwind_frontend as amrwind
import matplotlib.pyplot    as plt

# Also ignore warnings
import warnings
warnings.filterwarnings('ignore')

# Make all plots inline 
%matplotlib inline
"""
    NBADDCELL(nb, txt.format(**mdvar))
    txt="""\
# Start the AMR-Wind case
case = amrwind.MyApp.init_nogui()"""
    NBADDCELL(nb, txt)

    # Intro text
    txt = getsubstring(mdstr, '<!--INTROTEXT0-->', '<!--INTROTEXT1-->')
    NBADDMARKDOWN(nb, txt)

###########################
case.notebook.select(abltab)
useWSDir = True
WS   = 10     # Wind speed [m/s]
WDir = 225    # Wind direction

mdvar['useWSDir']         = useWSDir
mdvar['WS']               = WS   
mdvar['WDir']             = WDir 
mdvar['img_ABL_settings'] = imagedir+'/ABL_settings.png'

case.setAMRWindInput('useWSDir',      useWSDir)
case.setAMRWindInput('ABL_windspeed', WS,   forcechange=True)
case.setAMRWindInput('ABL_winddir',   WDir, forcechange=True)
case.ABL_calculateWindVector()

if savefigs:
    screenshot.Xvfb_screenshot(mdvar['img_ABL_settings'], crop=(0, 0, 515, 400))

if gennbfile:
    txt  = getsubstring(mdstr, '<!--WINDPROPSTART-->', '<!--WINDPROPEND-->')
    NBADDMARKDOWN(nb, txt.format(**mdvar))
    txt  = setAMRWindInputString(case, 'case', 'useWSDir')
    txt += setAMRWindInputString(case, 'case', 'ABL_windspeed',
                                 extra='forcechange=True')
    txt += setAMRWindInputString(case, 'case', 'ABL_winddir',  
                                 extra='forcechange=True')
    txt += "case.ABL_calculateWindVector()"
    NBADDCELL(nb, txt)
###########################

###########################
case.notebook.select(simtab)

physicsmodels          = ['FreeStream', 'Actuator']
dt                     = 0.10
mdvar['physicsmodels'] = physicsmodels
mdvar['dt']            = dt

case.setAMRWindInput('incflo.physics', physicsmodels)
case.setAMRWindInput('time.fixed_dt',  dt)
mdvar['img_sim_settings'] = imagedir+'/sim_settings.png'

if savefigs:
    screenshot.Xvfb_screenshot(mdvar['img_sim_settings'], crop=(0, 0, 515, 410))

if gennbfile:
    txt  = setAMRWindInputString(case, 'case', 'incflo.physics')
    txt += setAMRWindInputString(case, 'case', 'time.fixed_dt')
    NBADDCELL(nb, txt)

###########################

###########################
turbinescsv="""# CSV file should have columns with
# name, x, y, type, yaw, hubheight, options
T0, 480, 280, UnifCtTest, , ,
T1, 480, 680, UnifCtTest, , ,"""

domainsize       = [960,960,960]   # Domain size [x,y,z] in meters
backgrounddeltax = 10                 # Background mesh delta x in meters

mdvar['turbinescsv']                 = turbinescsv
mdvar['img_farm_turbine_layout']     = imagedir+'/farm_turbine_layout.png'
mdvar['domainsize']                  = domainsize
mdvar['backgrounddeltax']            = backgrounddeltax
mdvar['turbinecsv_help']             = screenshot.gethelpmesg(farmyaml, 
                                                 'frame_farmturbinecsv')

# Set the parameters
case.setAMRWindInput('turbines_csvtextbox',         turbinescsv)
case.setAMRWindInput('turbines_domainsize',         domainsize)
case.setAMRWindInput('turbines_backgroundmeshsize', backgrounddeltax)
case.setAMRWindInput('turbines_deleteprev', True)   # Delete any existing turbines from the system

#-------------------------------------------------------
case.notebook.select(farmtab)
case.toggledframes['frame_farmturbines'].setstate(True)

screenshot.scrollcanvas(case.notebook._tab['Farm'].canvas, 1.0)
if savefigs:
    screenshot.Xvfb_screenshot(mdvar['img_farm_turbine_layout'], 
                               crop=(0,60,515,scrheight-175))
#--------------------------
if gennbfile:
    txt = """\
## Create wind farm layout and domain

We'll use a CSV format to provde the turbine layout information.  This
will generally take the form of something like 

```
{turbinescsv}
```

Here's what each of the columns mean:

{turbinecsv_help}
"""
    NBADDMARKDOWN(nb, txt.format(**mdvar))

    txt = """\
turbinescsv=\"\"\"
{turbinescsv}
\"\"\"
case.setAMRWindInput('turbines_csvtextbox',  turbinescsv)"""
    NBADDCELL(nb, txt.format(**mdvar))

    txt = """\
Note that if you already have a csv file saved somewhere, you can load that directly using the `loadTurbineCSVFile()` command, like
```python
case.loadTurbineCSVFile('turbines.csv')
```
instead of using `setAMRWindInput()` to set the variable directly.

We'll also need to set some thing things like the turbine domainsize
of `{domainsize}` and background mesh size of `{backgrounddeltax}`m."""
    NBADDMARKDOWN(nb, txt.format(**mdvar))

    txt  = setAMRWindInputString(case, 'case', 'turbines_domainsize')
    txt += setAMRWindInputString(case, 'case', 'turbines_backgroundmeshsize')
    txt += setAMRWindInputString(case, 'case', 'turbines_deleteprev')
    NBADDCELL(nb, txt)
###########################

###########################
# Set the z boundaries to slip wall
case.notebook.select(domaintab)
case.toggledframes['frame_zBC'].setstate(True)
screenshot.scrollcanvas(case.notebook._tab['Domain'].canvas, 1.0)

zlo_type                          = 'slip_wall'
zhi_type                          = 'slip_wall'
mdvar['zlo_type']                 = zlo_type
mdvar['zhi_type']                 = zhi_type
mdvar['img_zboundaries']          = imagedir+'/zlo_zhi_boundary.png'

# Set the parameters
case.setAMRWindInput('zlo_type',         zlo_type)
case.setAMRWindInput('zhi_type',         zhi_type)

if savefigs:
    screenshot.Xvfb_screenshot(mdvar['img_zboundaries'], 
                               crop=(0,425,515,scrheight))

# ------------------
if gennbfile:
    txt="""We also need to set the upper and lower Z boundaries to
`slip_wall`."""
    NBADDMARKDOWN(nb, txt.format(**mdvar))

    txt  = setAMRWindInputString(case, 'case', 'zlo_type')
    txt += setAMRWindInputString(case, 'case', 'zhi_type')
    NBADDCELL(nb, txt)
###########################



###########################
fig, ax = plt.subplots(figsize=(5,5), facecolor='w', dpi=150)
case.turbines_previewAllTurbines(ax=ax)
plt.tight_layout()
mdvar['img_turbine_layout_preview']=imagedir+'/farm_turbine_layout_preview.png'
if savefigs:
    plt.savefig(mdvar['img_turbine_layout_preview'])
#--------------------------
if gennbfile:
    txt = """You can preview the locations and domain size using the `turbines_previewAllTurbines() command:`"""
    NBADDMARKDOWN(nb, txt.format(**mdvar))

    txt = """\
# Preview the turbine layout
fig, ax = plt.subplots(figsize=(5,5), facecolor='w', dpi=150)
case.turbines_previewAllTurbines(ax=ax)
"""
    NBADDCELL(nb, txt)

###########################

###########################
case.turbines_createAllTurbines()
case.notebook.select(turbinetab)

mdvar['img_farm_turbine_created'] = imagedir+'/farm_turbine_created.png'
if savefigs:
    screenshot.Xvfb_screenshot(mdvar['img_farm_turbine_created'], 
                               crop=(0,60,515,scrheight-350))
# ------------------
if gennbfile:
    txt="""In this next step, we tell it to actually create the turbines specified in the CSV input."""
    NBADDMARKDOWN(nb, txt.format(**mdvar))

    txt="""
case.turbines_createAllTurbines()

# Print out existing list of turbines, just to confirm that the turbines got made
print(case.listboxpopupwindict['listboxactuator'].getitemlist())
"""
    NBADDCELL(nb, txt)
###########################

###########################
# Set Actuator_UniformCtDisk_density to 1.0
case.notebook.select(turbinetab)
case.toggledframes['frame_uniformctglobals'].setstate(True)
screenshot.scrollcanvas(case.notebook._tab['Turbines'].canvas, 1.0)

density = 1.0
mdvar['Actuator_UniformCtDisk_density'] = density
mdvar['img_uniformctdisk_density'] = imagedir+'/uniformctdisk_density.png'

case.setAMRWindInput('Actuator_UniformCtDisk_density', density)
if savefigs:
    screenshot.Xvfb_screenshot(mdvar['img_uniformctdisk_density'], 
                               crop=(0,425,515,scrheight))

# ------------------
if gennbfile:
    txt="""We also need to set the density global for all of the uniform Ct
disks."""
    NBADDMARKDOWN(nb, txt.format(**mdvar))

    txt  = setAMRWindInputString(case, 'case', 'Actuator_UniformCtDisk_density')
    NBADDCELL(nb, txt)

###########################


###########################
refinementcsv="""# CSV file should have columns with
# level, upstream, downstream, lateral, below, above, options
level, upstream, downstream, lateral, below, above, options
0,     1,    1,   1,   0.75, 1,
1,     0.5,  0.5, 0.5, 0.75, 1,"""

mdvar['refinementcsv']           = refinementcsv
mdvar['img_farm_refinementspec'] = imagedir+'/farm_refinementspec.png'
mdvar['refinecsv_help']  = screenshot.gethelpmesg(farmyaml, 
                                                  'frame_farmrefinecsv')

case.setAMRWindInput('refine_csvtextbox', refinementcsv)
case.setAMRWindInput('refine_deleteprev', True)
#-------------------------------------------------------
time.sleep(0.25)
case.notebook.select(farmtab)
case.toggledframes['frame_farmrefinement'].setstate(True)

screenshot.scrollcanvas(case.notebook._tab['Farm'].canvas, 1.0)
if savefigs:
    screenshot.Xvfb_screenshot(mdvar['img_farm_refinementspec'], 
                               crop=(0,60+200,515,scrheight-120))
#-------------------------------------------------------
if gennbfile:
    txt = """\
## Create wind farm refinement zones  

Now around each turbine, we'll add some refinement zones so the
turbine rotors can be resolved.  Similar to the turbine
specifications, we can specify all of the refinement zones through CSV
input.  Here the `refine_csvtextbox` variable can be used to hold the
string input, while `loadRefineCSVFile()` can be used to read a CSV
file.  """
    NBADDMARKDOWN(nb, txt.format(**mdvar))

    txt = """\
refinementcsv=\"\"\"
{refinementcsv}
\"\"\"
case.setAMRWindInput('refine_csvtextbox', refinementcsv)
case.setAMRWindInput('refine_deleteprev', True)
"""
    NBADDCELL(nb, txt.format(**mdvar))

    txt = """\
The specifications for the CSV columns are given below, along
with some optional parameters:

{refinecsv_help}

To create the actual refinement zones in the domain, use the
`refine_createAllZones()` method."""
    NBADDMARKDOWN(nb, txt.format(**mdvar))

    txt = """\
case.refine_createAllZones()
# Print out existing list of turbines
print(case.listboxpopupwindict['listboxtagging'].getitemlist())    
"""
    NBADDCELL(nb, txt.format(**mdvar))
###########################


###########################
case.refine_createAllZones()
p = case.launchpopupwin('plotdomain', savebutton=False)
time.sleep(0.1)
p.temp_inputvars['plot_refineboxes'].tkentry.select_set(0, Tk.END)
p.temp_inputvars['plot_turbines'].tkentry.select_set(0, Tk.END)
mdvar['img_plotDomainWin_refinezone'] = imagedir+'/plotDomainWin_refinezone.png'
if savefigs:
    screenshot.Xvfb_screenshot(mdvar['img_plotDomainWin_refinezone'], 
                               crop=screenshot.getwinpos(p))
time.sleep(0.1)
p.okclose()
###########################

###########################
# Plot the domain
case.setAMRWindInput('max_level',2)
fig, ax = plt.subplots(figsize=(5,5), facecolor='w', dpi=150)
time.sleep(0.25)
case.plotDomain(ax=ax)
plt.tight_layout()
mdvar['img_plotDomainFig_refineturbine'] = imagedir+'/plotDomainFig_refineturbine.png'
if savefigs:
    plt.savefig(mdvar['img_plotDomainFig_refineturbine'])
#-------------------------------------------------------
if gennbfile:
    txt = """Now let's plot the turbine layouts using the plotDomain()
method."""
    NBADDMARKDOWN(nb, txt.format(**mdvar))

    txt = """\
# Plot the domain
fig, ax = plt.subplots(figsize=(5,5), facecolor='w', dpi=150)
case.popup_storteddata['plotdomain']['plot_turbines']        = case.listboxpopupwindict['listboxactuator'].getitemlist()
case.popup_storteddata['plotdomain']['plot_refineboxes']     = case.listboxpopupwindict['listboxtagging'].getitemlist()
case.plotDomain(ax=ax)
"""
    NBADDCELL(nb, txt.format(**mdvar))
###########################


###########################
samplingcsv="""# CSV file should have columns withturbinescsv=
# name, type, upstream, downstream, lateral, below, above, n1, n2, options
name, type, upstream, downstream, lateral, below, above, n1, n2, options
cl1, centerline, 1,  0, none, none,  none,  11, 11, none
rp1, rotorplane, 2,  0, none, none,  none,  11, 11, none
sw1, streamwise, 2,  1, 1, 0.5,  0.5,  11, 11, usedx:0.25 noffsets:1
hh,  hubheight,400,400,400, 0,  none,  11, 11, usedx:10 units:meter center:farm orientation:x"""
#hh,  hubheight,  2,  1, 1, 0,  none,  11, 11, usedx:0.25 center:farm orientation:x

mdvar['samplingcsv']           = samplingcsv
mdvar['img_farm_samplingspec'] = imagedir+'/farm_samplingspec.png'
mdvar['samplingcsv_help']      = screenshot.gethelpmesg(farmyaml, 
                                                        'frame_farmrefinecsv')

case.setAMRWindInput('sampling_csvtextbox', samplingcsv)
case.setAMRWindInput('sampling_deleteprev', True)

time.sleep(0.25)
case.notebook.select(farmtab)
case.toggledframes['frame_farmsampling'].setstate(True)

screenshot.scrollcanvas(case.notebook._tab['Farm'].canvas, 1.0)
if savefigs:
    screenshot.Xvfb_screenshot(mdvar['img_farm_samplingspec'],
                               crop=(0,60+260,515,scrheight-50))
case.sampling_createAllProbes(verbose=False)
#-------------------------------------------------------
if gennbfile:
    txt = """\
## Create sampling planes

Now that we have the refinement zones specified, we'd like to add some
sampling probes in front of every turbine, and also for the wind farm
as a whole.

Here the `samplingcsv` variable will be used to hold the
specifications for all of the things we'd like to plot."""
    NBADDMARKDOWN(nb, txt.format(**mdvar))

    txt = """\
samplingcsv=\"\"\"
{samplingcsv}
\"\"\"
case.setAMRWindInput('sampling_csvtextbox', samplingcsv)
case.setAMRWindInput('sampling_deleteprev', True)
"""
    NBADDCELL(nb, txt.format(**mdvar))

    txt="""\
The definitions for each of the columns and the possible options
are given in the tables below:

{samplingcsv_help}

Now let's create the sampling probes using the
`sampling_createAllProbes()` method.
"""
    NBADDMARKDOWN(nb, txt.format(**mdvar))
    
    txt = """\
case.sampling_createAllProbes(verbose=False)
# Print out existing list of turbines
print(case.listboxpopupwindict['listboxsampling'].getitemlist())
"""
    NBADDCELL(nb, txt.format(**mdvar))

###########################

###########################
#case.refine_createAllZones()
p2 = case.launchpopupwin('plotdomain', savebutton=False)
time.sleep(0.1)
p2.temp_inputvars['plot_sampleprobes'].tkentry.select_set(0, Tk.END)
p2.temp_inputvars['plot_refineboxes'].tkentry.select_set(0, Tk.END)
p2.temp_inputvars['plot_turbines'].tkentry.select_set(0, Tk.END)

mdvar['img_plotDomainWin_samplingzone'] = imagedir+'/plotDomainWin_samplingzone.png'
if savefigs:
    screenshot.Xvfb_screenshot(mdvar['img_plotDomainWin_samplingzone'], 
                               crop=screenshot.getwinpos(p2))
time.sleep(0.2)
p2.okclose()
###########################

###########################
# Plot the domain
fig, ax = plt.subplots(figsize=(5,5), facecolor='w', dpi=150)
time.sleep(0.25)
case.plotDomain(ax=ax)
plt.tight_layout()
mdvar['img_plotDomainFig_refineturbinesampling'] = imagedir+'/plotDomainFig_refineturbinesampling.png'
if savefigs:
    plt.savefig(mdvar['img_plotDomainFig_refineturbinesampling'])

#-------------------------------------------------------
if gennbfile:
    txt = """Now to plot the domain we'll use the use the `plotDomain()` method again:"""
    NBADDMARKDOWN(nb, txt.format(**mdvar))

    txt="""\
# Plot the domain
fig, ax = plt.subplots(figsize=(5,5), facecolor='w', dpi=150)
case.popup_storteddata['plotdomain']['plot_refineboxes']     = case.listboxpopupwindict['listboxtagging'].getitemlist()
case.popup_storteddata['plotdomain']['plot_sampleprobes']    = case.listboxpopupwindict['listboxsampling'].getitemlist()
case.plotDomain(ax=ax)
"""
    NBADDCELL(nb, txt.format(**mdvar))
###########################

###########################
# See the input file
inputfile = case.writeAMRWindInput('')
mdvar['amrwindinput1'] = "\n".join([s for s in inputfile.split("\n") if s])
###########################


###########################
# Set up a wind sweep
case.notebook.select(farmtab)
case.toggledframes['frame_runsweep'].setstate(True)

windspeeds   = [10, 20]        
winddirs     = [270, 225]      

caseprefix   = "Tutorial3_Case_{CASENUM}"     
usenewdirs   = False                          
logfile      = 'Tutorial3_logfile.yaml'       

mdvar['img_farm_runsweepspec'] = imagedir+'/farm_runsweepspec.png'
mdvar['sweep_windspeeds']      = ' '.join([repr(x) for x in windspeeds])
mdvar['sweep_winddirs']        = ' '.join([repr(x) for x in winddirs])
mdvar['caseprefix']            = caseprefix
mdvar['usenewdirs']            = usenewdirs
mdvar['logfile']               = logfile
                                                    
case.setAMRWindInput('sweep_windspeeds',  mdvar['sweep_windspeeds'] )
case.setAMRWindInput('sweep_winddirs',    mdvar['sweep_winddirs'])
case.setAMRWindInput('sweep_caseprefix',  caseprefix)
case.setAMRWindInput('sweep_usenewdirs',  usenewdirs)
case.setAMRWindInput('sweep_logfile',     logfile)

case.notebook.select(farmtab)
case.toggledframes['frame_farmrefinement'].setstate(True)
screenshot.scrollcanvas(case.notebook._tab['Farm'].canvas, 1.0)
if savefigs:
    screenshot.Xvfb_screenshot(mdvar['img_farm_runsweepspec'],
                               crop=(0,60+325,515,scrheight-10))
#--------------------
case.sweep_SetupRunParamSweep(verbose=True)
time.sleep(2)
# Load the logfile
with open (logfile, "r") as myfile:
    mdvar['logfileoutput']=myfile.read()

#--------------------
if gennbfile:
    txt="""
## Set up a wind sweep

The above instructions were to set up a single case with one wind
speed ({WS} m/s) and one wind direction ({WDir}) degrees.  Now we'll
show what happens when you want to vary these to run a parameter
sweep. 
"""
    NBADDMARKDOWN(nb, txt.format(**mdvar))
    
    txt  = ''
    txt += setAMRWindInputString(case, 'case', 'sweep_windspeeds')
    txt += setAMRWindInputString(case, 'case', 'sweep_winddirs')
    txt += setAMRWindInputString(case, 'case', 'sweep_caseprefix')
    txt += setAMRWindInputString(case, 'case', 'sweep_usenewdirs')
    txt += setAMRWindInputString(case, 'case', 'sweep_logfile')
    NBADDCELL(nb, txt)

    txt = """
To run the sweep, use the `sweep_SetupRunParamSweep()` call:
"""
    NBADDMARKDOWN(nb, txt.format(**mdvar))

    txt = """\
# Set up the cases
case.sweep_SetupRunParamSweep(verbose=True)
"""
    NBADDCELL(nb, txt.format(**mdvar))

    txt = """We can check to make sure that the appropriate input files got
created:"""
    NBADDMARKDOWN(nb, txt.format(**mdvar))

    txt = """\
# List the amr-wind input files
import glob
glob.glob('{caseprefix}'.format(CASENUM='*'))
"""
    NBADDCELL(nb, txt.format(**mdvar))
    
###########################

###########################
# Save the wind farm setup

mdvar['farm_setupfile']    = 'Tutorial3_WindFarmSetup.yaml'
mdvar['farm_usercomments'] = 'Tutorial3 wind farm setup parameters.'
mdvar['img_farm_savefarmsetup'] = imagedir+'/farm_savefarmsetup.png'

case.setAMRWindInput('farm_setupfile',    mdvar['farm_setupfile'])
case.setAMRWindInput('farm_usercomments', mdvar['farm_usercomments'])

case.notebook.select(farmtab)
case.toggledframes['frame_farmsetup1'].setstate(True)
screenshot.scrollcanvas(case.notebook._tab['Farm'].canvas, 0.0)
if savefigs:
    screenshot.Xvfb_screenshot(mdvar['img_farm_savefarmsetup'],
                               crop=(0,60,515,scrheight-300))
# write file
case.writeFarmSetupYAML(mdvar['farm_setupfile'])
with open (mdvar['farm_setupfile'], "r") as myfile:
    inputfile=myfile.read()
mdvar['farm_setupfile_output'] = "\n".join([s for s in inputfile.split("\n") if s])

#--------------------
if gennbfile:
    txt = getsubstring(mdstr, '<!--SAVESETUPSTART-->', '<!--SAVESETUPEND-->')
    txt += """

To do this we'll use the `writeFarmSetupYAML()` method, and also save
some comments into the file at the same time.
"""
    NBADDMARKDOWN(nb, txt.format(**mdvar))

    txt="""
# Save the wind farm setup
case.setAMRWindInput('farm_usercomments', '{farm_usercomments}')
case.writeFarmSetupYAML('{farm_setupfile}')
"""
    NBADDCELL(nb, txt.format(**mdvar))
###########################


###########################
# WRAP UP AND FINISH
# -------------------------

# Write the markdown file
logging.info("Main    : writing "+mdfile)
with open(mdfile, "w") as f:
    f.write(mdstr.format(**mdvar))

if gennbfile:
    logging.info("Main    : writing "+nbfile)
    nbf.write(nb, nbfile)
    if runjupyter:
        logging.info("Main    : running jupyter on "+nbfile)
        cmd='jupyter nbconvert --execute --inplace '+nbfile
        os.system(cmd)
    
# Quit and clean up
time.sleep(2)
case.quit()
t1.join()
